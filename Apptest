package com.example;

import org.junit.jupiter.api.Test;
import java.util.List;
import com.example.entity.Order;
import com.example.service.OrderService;
import com.example.service.OrderServiceImpl;
import java.io.File;
import java.lang.reflect.Method;
import static org.junit.jupiter.api.Assertions.*;

public class AppTest {

    OrderService orderService = new OrderServiceImpl(); 

    @Test
    void test_Util_File_Exist() {
        File file = new File("src/main/java/com/example/util/DBConnectionUtil.java");
        assertTrue(file.exists());
    }

    @Test 
    void test_Util_Folder_Exist() {
        File folder = new File("src/main/java/com/example/");
        assertTrue(folder.exists());
    }

    @Test
    void test_Create_Query_Exist() {
        Order order = new Order(0, "Testuser", "2025-05-21", 123, "Pending");
        String res = orderService.addOrder(order);
        assertTrue(res.contains("successfully."));

        List<Order> orders = orderService.getAllOrders();
        assertTrue(orders.stream().anyMatch(o -> o.getCustomerName().equals("Testuser")));
    }

    @Test
    void test_Check_Method_Exist() {
        try {
            Class<?> clazz = Class.forName("com.example.service.OrderServiceImpl");
            Method add = clazz.getDeclaredMethod("addOrder", com.example.entity.Order.class);
            Method delete = clazz.getDeclaredMethod("deleteOrder", int.class);
            Method getAll = clazz.getDeclaredMethod("getAllOrders");
            assertNotNull(add);
            assertNotNull(delete);
            assertNotNull(getAll);
        } catch (Exception e) {
            fail("Method missing: " + e.getMessage());
        }
    }
    @Test
    void test_Create_Query_Exist() {
        Order order = new Order(0, "TestUser", "2025-05-21", 123.45, "Pending");
        String res = orderService.addOrder(order);
        assertTrue(res.contains("successfully"));

        List<Order> orders = orderService.getAllOrders();
        assertTrue(orders.stream().anyMatch(o -> o.getCustomerName().equals("TestUser")));
    }
    @Test
    void test_Delete_Query_Exist() {
        Order order = new Order(0, "DeleteUser", "2025-05-21", 99.99, "Pending");
        orderService.addOrder(order);

        List<Order> orders = orderService.getAllOrders();
        int id = orders.stream()
                .filter(o -> o.getCustomerName().equals("DeleteUser"))
                .map(Order::getOrderId)
                .findFirst()
                .orElse(-1);

        assertNotEquals(-1, id);

        String res = orderService.deleteOrder(id);
        assertTrue(res.contains("successfully"));

        List<Order> updated = orderService.getAllOrders();
        assertFalse(updated.stream().anyMatch(o -> o.getOrderId() == id));
    }
}
